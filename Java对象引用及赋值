关键字：java对象 引用

Java对象及其引用

   最近，室友与我讨论一个他刷题过程中考虑的一个问题，其实就是给Linkedlist继续往后面接node，大部分同学看到这的时候感觉这种问题也太蠢了吧，但是后来仔细
   思考了一下，觉得问题虽然很容易解决，学过数据结构的同学都能写出来，但是这里面涉及的对象和对象引用的基本概念还是很值得写一片日志来记录下，毕竟能解决一个
   问题和讲明白一个问题还是有一定差距的。。。。 Ok, cut the crap，进入正题。
   
   当时我看到他写的代码，第一反应是觉得很奇怪，感觉没有人这样写啊。接下来是我室友写的代码(额。。大概是这样，我只写出问题的一段)
   public class LinkedList{
       // Node类
       static class Node{
          int val;
          Node next;
          public Node(int val){
              this.val = val;
          }
       }
       public static void main(String[] args){
          Node a = new Node(1);
          Node b = a;
          a = a.next;
          a = new Node(2);
          System.out.println(b.next.val);
       }
   }
   看到这里，我先是问了一句我室友：“你这是要干嘛。” 他回答：“就是往a后面继续加node啊！”
   按照我们以往的习惯，当你初始化一个Node的时候，以这个node为head，然后会再创建一个Node类的引用变量(b)指向这个head，然后再进行接下来的操作，这是这串
   代码我觉得看着很奇怪的第一点，第二点就是为啥明明只需要一行代码完成添加node的操作非要写两行，写两行也无所谓啦，关键是再我刷的那么多链表的题，没见过这
   的，不知道各位同学有没有相同的感觉(可能是我见识少了，本人也是小白一枚，各位大佬别喷我，会打击我自信心的哈哈)。
   
   我们这里先大概分析一下main函数里四行代码的意思，首先创建一个Node类(a)并赋初值为1，然后声明令一个Node类(b)指向a，接下来a=a.next，a这是后就是NULL
   了，然后a又赋值成一个值为2的Node。最后理应输出的是2。这样一个流程下来，很流畅啊，没什么问题啊。？？？？
    
   仔细想想我还是觉得不对，这个时候我脑子里想的就是到底这个“=”是传的地址还是这个实体类啊。然后我就按照我的想法给室友讲了一遍，他说听懂了，我倒是讲的乱七
   八糟，然后回到我的房间我就开始google了。果然这类的问题很多博主都已经昭告天下了。我找了一篇看了一下。(citation写在文章最后了，这里像该博主致敬！)
   
   按照那位博主的思想，我们接着用这个例子来讲一下：
   Node a = new Node(1);
   通常把这条语句的动作称之为创建一个对象，其实，它包含了四个动作。
   1）右边的“new Node”是以Node类为模版，在堆空间创建了一个Node类；
   2）末尾的()意味着，在对象创建后，立即调用Node类的构造函数，对刚生成的对象进行初始化。构造函数是肯定有的。如果你没写，Java会给你补上一个默认的构造函数
   3）左边的“Node a”创建了一个Node类引用变量。所谓Node类引用，就是以后可以用来指向Vehicle对象的对象引用。
   4）“=”操作符使对象引用指向刚创建的那个Node对象。
   所以这一句就包含了两个实体，等号左边是对象引用变量，相当于指向对象的指针；等号右边就是对象本身了。
   
   这时候我们再想一想，Node a = new Node(1)，我们创建的对象叫什么名字？叫“Node”？ 不对！“Node”是类的名字。
   一个Node类可以创建很多对象，这些类不可能没有名字吧，连名字都没有，就没法直接访问它。我们只能通过对象引用来间接访问对象。
   
   为了更加形象的说明对象引用和对象，以及他们之间的关系，可以做一个或许不是很妥当的比喻。对象好比是一个很气球，对象引用变量就是用来系气球的那根绳子。
   当你只执行“Node a;”的时候，这个时候我们只是创建一个Node类的引用变量，但是并没有指向任何一个变量，它的值是NULL。这个时候我们有了绳子，但是气球呢？
   我们现在来吹,“new Node(1)”,好了，气球吹好了。Ok，我们把绳子系在气球上吧，没错，就是用“=”来把他们系在一起。
   
   接下来再来一行代码: Node b = a;
   等号左边又做了一个绳子，这里，发生了复制行为，但是，这里复制的不是对象，而是复制了对象引用，相当于a,b两个指针都指向同一个对象。形象的说，a,b两根绳子
   都系在了同一个气球上。
   
   根据以上的叙述，我们可以得到以下两条结论：
   a) 一个对象引用可以指向0个或1个对象(一根绳子可以不系汽球，也可以系一个汽球);
   b) 一个对象可以有N个引用指向它(可以有N条绳子系住一个汽球)。
   
   为了加深记忆，我们再看下面一个例子：

   先看下面的程序：

   StringBuffer s;
   s = new StringBuffer("Hello World!");

   第一个语句仅为引用(reference)分配了空间，而第二个语句则通过调用类(StringBuffer)的构造函数StringBuffer(String str)为类生成了一个实例（或称为
   对象）。这两个操作被完成后，对象的内容则可通过s进行访问——在Java里都是通过引用来操纵对象的。
   
   Java对象和引用的关系可以说是互相关联，却又彼此独立。彼此独立主要表现在：引用是可以改变的，它可以指向别的对象，譬如上面的s，你可以给它另外的对象，如：
   s = new StringBuffer("Java");
   这样一来，s就和它指向的第一个对象脱离关系。

   *从存储空间上来说，对象和引用也是独立的，它们存储在不同的地方，对象一般存储在堆中，而引用存储在速度更快的堆栈中。

   引用可以指向不同的对象，对象也可以被多个引用操纵，如：
   StringBuffer s1 = s;
   这条语句使得s1和s指向同一个对象。既然两个引用指向同一个对象，那么不管使用哪个引用操纵对象，对象的内容都发生改变，并且只有一份，通过s1和s得到的内容自
   然也一样，(String除外，因为String始终不变，String s1=”AAAA”; String s=s1,操作s,s1由于始终不变，所以为s另外开辟了空间来存储s,)如下面的程序：
   
   StringBuffer s;
   s = new StringBuffer("Java");
   StringBuffer s1 = s;
   s1.append(" World");
   System.out.println("s1=" + s1.toString());//打印结果为：s1=Java World
   System.out.println("s=" + s.toString());//打印结果为：s=Java World

   上面的程序表明，s1和s打印出来的内容是一样的，这样的结果看起来让人非常疑惑，但是仔细想想，s1和s只是两个引用，它们只是操纵杆而已，它们指向同一个对象，
   操纵的也是同一个对象，通过它们得到的是同一个对象的内容。这就像汽车的刹车和油门，它们操纵的都是车速，假如汽车开始的速度是80，然后你踩了一次油门，汽车
   加速了，假如车速升到了120，然后你踩一下刹车，此时车速是从120开始下降的，假如下降到60，再踩一次油门，车速则从60开始上升，而不是从第一次踩油门后的120
   开始。也就是说车速同时受油门和刹车影响，它们的影响是累积起来的，而不是各自独立（除非刹车和油门不在一辆车上）。所以，在上面的程序中，不管使用s1还是s操
   纵对象，它们对对象的影响也是累积起来的（更多的引用同理）。



   只有理解了对象和引用的关系，才能理解参数传递。

   一般面试题中都会考Java传参的问题，并且它的标准答案是Java只有一种参数传递方式：那就是按值传递，即Java中传递任何东西都是传值。如果传入方法的是基本类
   型的东西，你就得到此基本类型的一份拷贝。如果是传递引用，就得到引用的拷贝。

   一般来说，对于基本类型的传递，我们很容易理解，而对于对象，总让人感觉是按引用传递，看下面的程序：

   public class ObjectRef {
       //基本类型的参数传递
       public static void testBasicType(int m) {
           System.out.println("m=" + m);//m=50
           m = 100;
           System.out.println("m=" + m);//m=100
       }
       //参数为对象，不改变引用的值 ？？？？？
       public static void add(StringBuffer s) {
           s.append("_add");
       }
       //参数为对象，改变引用的值 ？？？？？
       public static void changeRef(StringBuffer s) {
           s = new StringBuffer("Java");
       }
       public static void main(String[] args) {
           int i = 50;
           testBasicType(i);
           System.out.println(i);//i=50
           StringBuffer sMain = new StringBuffer("init");
           System.out.println("sMain=" + sMain.toString());//sMain=init
           add(sMain);
           System.out.println("sMain=" + sMain.toString());//sMain=init_add
           changeRef(sMain);
           System.out.println("sMain=" + sMain.toString());//sMain=init_add
       }
   }
   以上程序的允许结果显示出，testBasicType方法的参数是基本类型，尽管参数m的值发生改变，但并不影响i。
         add方法的参数是一个对象，当把sMain传给参数s时，s得到的是sMain的拷贝，所以s和sMain指向同一个对象，因此，使用s操作影响的其实就是sMain指向的
         对象，故调用add方法后，sMain指向的对象的内容发生了改变。
         在changeRef方法中，参数也是对象，当把sMain传给参数s时，s得到的是sMain的拷贝，但与add方法不同的是，在方法体内改变了s指向的对象（也就是s指
         向了别的对象,牵着气球的绳子换气球了），给s重新赋值后，s与sMain已经毫无关联，它和sMain指向了不同的对象，所以不管对s做什么操作，都不会影响
         sMain指向的对象，故调用changeRef方法前后sMain指向的对象内容并未发生改变。
   
   Citation: https://www.cnblogs.com/focuschen/articles/2497768.html
   
