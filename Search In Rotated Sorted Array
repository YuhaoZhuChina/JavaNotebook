Suppose an array sorted in ascending order is rotated at some pivot unknown to you beforehand.
(i.e., [0,1,2,4,5,6,7] might become [4,5,6,7,0,1,2]).
You are given a target value to search. If found in the array return its index, otherwise return -1.
You may assume no duplicate exists in the array.
Your algorithm's runtime complexity must be in the order of O(log n).

以上题目描述，其中tricky的地方就是这个题限定了时间复杂度一定是O(logn), 如果没有这个限制，傻子都会做。

觉得这个题考的不是算法，因为每当看到时间复杂度是logn的时候，就会想到分治，二分法； 我觉得考的是个技巧。所以写这个笔记记录一下比较好。

解题思路：1：首先要找到这个数组rotate的程度，以示例来看，这个数组就rotate了4个数。要想找到这个程度，就需要找到数组中最小的数的index。
         2：找最小的数时也需要用二分法，别忘了规定的时间复杂度是O（logn）。
         3：有个这个旋转的程度之后，我们将一般二分法找到的middle加上旋转程度再模上数组的长度，就是真正的middle。
         4：二分法一定要注意pointer的更新和control flow
   
   
Code:
class Solution {
    public int search(int[] nums, int target) {
        int n = nums.length;
        // find the index of smallest number 
        int start = 0, end = n-1;
        while(start < end) {
            int mid = (start+end)/2;
            if(nums[mid] > nums[end]) {
                start = mid + 1;
            }else {
                end = mid;
            }
        }
        int indexSmallest = start;
        
        // using binary search to find dummy middle index, then rotate the dummy middle 
        // index to get the real middle index.
        start = 0; 
        end = n-1;
        while(start <= end){
            int dummyMid = (start+end)/2;
            int realMid = (dummyMid+indexSmallest) % n;
            if(nums[realMid] == target)
                return realMid;
            if(nums[realMid] < target)
                start = dummyMid+1;
            else
                end = dummyMid-1;
        }
        return -1;
    }
}
